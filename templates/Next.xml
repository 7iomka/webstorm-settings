<templateSet group="Next">
  <template name="ssg" value="import React from 'react';&#10;import { getLayout } from '@components/layouts/base-layout';&#10;import { GetStaticPaths, GetStaticProps } from 'next';&#10;import { OnlyBrowserPageProps, SSGPageProps } from '@ts/types/page-props';&#10;import { NextPageWithLayout, CommonServerSideParams } from '@ts/types/nextjs';&#10;import { getCommonStaticPaths, getCommonStaticProps } from '@utils/nextjs/ssg';&#10;&#10;export const getStaticProps: GetStaticProps&lt;SSGPageProps, CommonServerSideParams&gt; = getCommonStaticProps;&#10;export const getStaticPaths: GetStaticPaths&lt;CommonServerSideParams&gt; = getCommonStaticPaths;&#10;type Props = {} &amp; SSGPageProps&lt;Partial&lt;OnlyBrowserPageProps&gt;&gt;;&#10;&#10;const $var$Page: NextPageWithLayout&lt;Props&gt; = ({ lang }) =&gt; {&#10;  return (&#10;    &lt;&gt;&#10;      &lt;h2&gt;Page content&lt;/h2&gt;&#10;    &lt;/&gt;&#10;  );&#10;};&#10;&#10;$var$Page.getLayout = getLayout;&#10;&#10;export default $var$Page;&#10;" description="SSG page (simple)" toReformat="false" toShortenFQNames="true">
    <variable name="var" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ssge" value="import React from 'react';&#10;import deepmerge from 'deepmerge';&#10;import { useTranslation } from 'react-i18next';&#10;import { GetStaticPaths, GetStaticProps } from 'next';&#10;import { getLayout } from '@components/layouts/base-layout';&#10;import { OnlyBrowserPageProps, SSGPageProps } from '@ts/types/page-props';&#10;import { CommonServerSideParams, NextPageWithLayout, StaticPropsInput, StaticPropsOutput } from '@ts/types/nextjs';&#10;import { getCommonStaticPaths, getCommonStaticProps } from '@utils/nextjs/ssg';&#10;&#10;export const getStaticProps: GetStaticProps&lt;SSGPageProps, CommonServerSideParams&gt; = async (&#10;  props: StaticPropsInput,&#10;): Promise&lt;StaticPropsOutput&gt; =&gt; {&#10;  const commonStaticProps = await getCommonStaticProps(props);&#10;  // Get some data from API&#10;  return deepmerge(commonStaticProps, {&#10;    props: {},&#10;  });&#10;};&#10;export const getStaticPaths: GetStaticPaths&lt;CommonServerSideParams&gt; = getCommonStaticPaths;&#10;&#10;type Props = {&#10;  customProp: number;&#10;} &amp; SSGPageProps&lt;Partial&lt;OnlyBrowserPageProps&gt;&gt;;&#10;&#10;const $var$Page: NextPageWithLayout&lt;Props&gt; = (props) =&gt; {&#10;  // eslint-disable-next-line @typescript-eslint/no-unused-vars&#10;  const { t } = useTranslation();&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;h2&gt;Page content&lt;/h2&gt;&#10;    &lt;/&gt;&#10;  );&#10;};&#10;&#10;$var$Page.getLayout = getLayout;&#10;&#10;export default $var$Page;&#10;" description="SSG page (extended)" toReformat="false" toShortenFQNames="true">
    <variable name="var" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ssr" value="import React from 'react';&#10;import { getLayout } from '@components/layouts/base-layout';&#10;import { GetServerSideProps, GetServerSidePropsResult } from 'next';&#10;import { OnlyBrowserPageProps, SSGPageProps, SSRPageProps } from '@ts/types/page-props';&#10;import { CommonServerSideParams, GetServerSidePropsContext, NextPageWithLayout } from '@ts/types/nextjs';&#10;import { getCommonServerSideProps } from '@utils/nextjs/ssr';&#10;import { useTranslation } from 'react-i18next';&#10;&#10;/**&#10; * Props that are only available for this page&#10; */&#10;type CustomPageProps = {&#10;  [key: string]: any;&#10;};&#10;&#10;type GetServerSidePageProps = CustomPageProps &amp; SSRPageProps;&#10;&#10;export const getServerSideProps: GetServerSideProps&lt;GetServerSidePageProps&gt; = async (&#10;  context: GetServerSidePropsContext&lt;CommonServerSideParams&gt;,&#10;): Promise&lt;GetServerSidePropsResult&lt;GetServerSidePageProps&gt;&gt; =&gt; {&#10;  const commonServerSideProps = await getCommonServerSideProps(context);&#10;  // Get some data from API&#10;&#10;  return {&#10;    // Props returned here will be available as page properties (pageProps)&#10;    props: {&#10;      ...commonServerSideProps,&#10;    },&#10;  };&#10;};&#10;&#10;type Props = CustomPageProps &amp; (SSRPageProps &amp; SSGPageProps&lt;OnlyBrowserPageProps&gt;);&#10;&#10;const $var$Page: NextPageWithLayout&lt;Props&gt; = (props) =&gt; {&#10;  // eslint-disable-next-line @typescript-eslint/no-unused-vars&#10;  const { t } = useTranslation();&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;h2&gt;Page content&lt;/h2&gt;&#10;    &lt;/&gt;&#10;  );&#10;};&#10;&#10;$var$Page.getLayout = getLayout;&#10;&#10;export default $var$Page;&#10;" description="SSR page" toReformat="false" toShortenFQNames="true">
    <variable name="var" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="lay" value="import React from 'react';&#10;import Layout from '@components/layouts/_layout';&#10;import Header from '@components/layout/header/header';&#10;import Aside from '@components/layout/aside/aside';&#10;import Main from '@components/layout/main/main';&#10;import Footer from '@components/layout/footer/footer';&#10;&#10;const $var$Layout: React.FC = ({ children }) =&gt; {&#10;  return (&#10;    &lt;Layout isAsideEnabled isAsideFixed&gt;&#10;      &lt;div className=&quot;c-layout__header&quot;&gt;&#10;        &lt;Header /&gt;&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;c-layout__inner&quot;&gt;&#10;        &lt;div className=&quot;c-layout__aside&quot;&gt;&#10;          &lt;Aside /&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;c-layout__wrapper&quot;&gt;&#10;          &lt;div className=&quot;c-layout__main&quot;&gt;&#10;            &lt;Main&gt;{children}&lt;/Main&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;c-layout__footer&quot;&gt;&#10;            &lt;Footer /&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/Layout&gt;&#10;  );&#10;};&#10;&#10;export const getLayout = (Page) =&gt; &lt;$var$Layout&gt;{Page}&lt;/$var$Layout&gt;;&#10;&#10;export default $var$Layout;&#10;" description="Layout skeleton" toReformat="false" toShortenFQNames="true">
    <variable name="var" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
</templateSet>